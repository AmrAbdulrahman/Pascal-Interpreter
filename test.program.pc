program Main;
   var x, c, s, cs: real;

   procedure square(n : integer);
      var res : integer;
      var real1 : integer;
   begin
      res := n * n;
      return res;
   end;

   { return expression on the fly }
   procedure cube(n : integer);
   begin
      return n * n * n;
   end;

   { function that calls a function}
   procedure compose(n : integer);
   begin
      return square(n) + cube(n);
   end;

begin { Main }

  x := 2;
  c := cube(x);
  s := square(x);
  cs := compose(x);

  { argument as expression => function invokation }
  print('x =>', x, ' | sqr =>', s, ' | cube =>', c, ' | compose() =>', compose(x));
  print('single quoted string');
  print("double quoted string");
  print("string with special \n\'\" characters");

  return (x + cs) / 2;
end.  { Main }
